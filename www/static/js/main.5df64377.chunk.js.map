{"version":3,"sources":["mainPage/topBar.jsx","websockets.jsx","mainPage/modules/Timeline.js","mainPage/modules/victory.js","mainPage/modules/ApexGraph.js","mainPage/modules/addSensor.jsx","mainPage/modules/sampleChart.jsx","mainPage/modules/nivo.js","App.js","mainPage/content.jsx","vehicleStatus/statusTable.jsx","serviceWorker.js","index.js"],"names":["MenuExampleSecondary","props","state","sideMenuVisible","activeItem","this","currentPage","Menu","Item","name","active","onClick","setPage","href","Component","DataWebSocketRequest","Timeline","onTimeframeUpdate","throttle","center","radius","timeMin","timeMax","lastX","minorDivisions","majorDivisions","divisionPlace","MAJOR_TICK_WIDTH","MAJOR_TICK_HEIGHT","MINOR_TICK_WIDTH","MINOR_TICK_HEIGHT","MAJOR_TICK_COLOR","MINOR_TICK_COLOR","zoomMotionMultiplier","zoomWheelMultiplier","canvas","ReactDOM","findDOMNode","ctx","getContext","cwidth","scrollWidth","cheight","scrollHeight","imp","Impetus","source","update","x","friction","window","addEventListener","redraw","event","touchStarted","touchEnded","wheelScrolled","setRad","newX","dx","calcTimeBounds","console","log","height","width","fillStyle","fillRect","drawTicks","drawDisabledBackground","drawPositionLine","centerPx","textAlign","fillText","timeStart","direction","timeToPx","font","minorLowerMark","Math","floor","minorUpperMark","ceil","i","drawTick","majorLowerMark","majorUpperMark","timeVal","major","num","min","max","toFixed","time","map","in_min","in_max","out_min","out_max","newR","abs","updateDivisions","places","log10","pow","touches","length","pause","tmListener","touchMove","originalRad","originalDs","pageX","resume","removeEventListener","newDs","newRad","preventDefault","deltaY","style","React","ApexGraph","updateDomain","newRange","setState","options","xaxis","chart","animations","enabled","easing","zoom","title","graphTitle","dataLabels","stroke","curve","text","sensorName","align","grid","row","colors","opacity","type","timeRange","series","data","sensorData","prevProps","prevState","snapshot","SensorDropdown","Dropdown","placeholder","fluid","search","selection","avaliableSensors","onChange","dropdownChange","value","selectionValue","push","y","random","graphStyle","backgroundColor","timelineStyle","position","left","bottom","Graph","charts","key","class","dropdownValue","lastime","realtime","StatusTable","tableRows","checkmarkBool","connected","Table","Cell","Icon","Row","detail","Header","HeaderCell","Body","data2","App","e","handleHamburgerClick","currentMenu","newFrame","currentSensors","sidebarEnabled","currentProfile","density","path","Boolean","location","hostname","match","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iVAGqBA,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAAEC,gBAAiB,QAFf,E,sEAMjB,IAAMC,EAAaC,KAAKJ,MAAMK,YAC9B,OACE,kBAACC,EAAA,EAAD,KAEE,kBAACA,EAAA,EAAKC,KAAN,CACEC,KAAK,OACLC,OAAuB,SAAfN,EACRO,QAASN,KAAKJ,MAAMW,QACpBC,KAAK,aAGP,kBAACN,EAAA,EAAKC,KAAN,CACEC,KAAK,aACLC,OAAuB,eAAfN,EACRO,QAASN,KAAKJ,MAAMW,QACpBC,KAAK,iB,GAtBmCC,aCWnCC,I,kBCTMC,E,YACjB,WAAYf,GAAQ,IAAD,8BACf,4CAAMA,KAEDgB,kBAAoBC,mBAASjB,EAAMgB,kBAAmB,IAAK,IAEhE,EAAKE,OAAS,EACd,EAAKC,OAAS,EAEd,EAAKC,QAAU,EACf,EAAKC,QAAU,EAEf,EAAKC,MAAQ,EAEb,EAAKC,eAAiB,GACtB,EAAKC,eAAiB,IACtB,EAAKC,cAAgB,EAIrB,EAAKC,iBAAmB,EACxB,EAAKC,kBAAoB,GAEzB,EAAKC,iBAAmB,EACxB,EAAKC,kBAAoB,GAGzB,EAAKC,iBAAmB,qBACxB,EAAKC,iBAAmB,qBAExB,EAAKC,qBAAuB,EAE5B,EAAKC,oBAAsB,KA/BZ,E,iFAoCE,IAAD,OAChB7B,KAAK8B,OAASC,IAASC,YAAYhC,MACnCA,KAAKiC,IAAMjC,KAAK8B,OAAOI,WAAW,MAElClC,KAAKmC,OAASnC,KAAK8B,OAAOM,YAC1BpC,KAAKqC,QAAUrC,KAAK8B,OAAOQ,aAE3BtC,KAAKuC,IAAM,IAAIC,EAAQ,CACnBC,OAAQzC,KAAK8B,OACbY,OAAQ,SAACC,GAAD,OAAO,EAAKD,OAAOC,IAC3BC,SAAU,MAIdC,OAAOC,iBAAiB,UAAU,WAE9B,EAAKC,YAIT/C,KAAK8B,OAAOgB,iBAAiB,cAAc,SAACE,GAAD,OAAW,EAAKC,aAAaD,MACxEhD,KAAK8B,OAAOgB,iBAAiB,YAAY,SAACE,GAAD,OAAW,EAAKE,WAAWF,MACpEhD,KAAK8B,OAAOgB,iBAAiB,eAAe,SAACE,GAAD,OAAW,EAAKE,WAAWF,MACvEhD,KAAK8B,OAAOgB,iBAAiB,SAAS,SAACE,GAAD,OAAW,EAAKG,cAAcH,MAEpEhD,KAAKoD,OAAO,GACZpD,KAAK0C,OAAO,K,6BAGTW,GAEH,IAAIC,EAAKD,EAAOrD,KAAKkB,MAErBlB,KAAKc,SAAWwC,EAAKtD,KAAKe,OAAS,EAAKf,KAAKmC,OAC7CnC,KAAKkB,MAAQmC,EACbrD,KAAKuD,iBACLvD,KAAK+C,W,+BAIF/C,KAAKY,kBACJZ,KAAKY,kBAAkB,CAACZ,KAAKgB,QAAShB,KAAKiB,UAE3CuC,QAAQC,IAAI,uCAIhBzD,KAAKmC,OAASnC,KAAK8B,OAAOM,YAC1BpC,KAAKqC,QAAUrC,KAAK8B,OAAOQ,aAC3BtC,KAAK8B,OAAO4B,OAAS1D,KAAKqC,QAC1BrC,KAAK8B,OAAO6B,MAAQ3D,KAAKmC,OAIzBnC,KAAKiC,IAAI2B,UAAY,mBACrB5D,KAAKiC,IAAI4B,SAAS,EAAG,EAAG7D,KAAKmC,OAAQnC,KAAKqC,SAE1CrC,KAAK8D,UAAU9D,KAAKmB,eAAgBnB,KAAKoB,gBAEzCpB,KAAK+D,uBAAuB,GAAI,GAEhC/D,KAAKgE,qB,yCAIL,IAAIC,EAAWjE,KAAKmC,OAAS,EAC7BnC,KAAKiC,IAAI2B,UAAY,mBACrB5D,KAAKiC,IAAI4B,SAASI,EAAWjE,KAAKsB,iBAAmB,EAAG,EAAGtB,KAAKsB,iBAAkBtB,KAAKqC,SACvFrC,KAAKiC,IAAI2B,UAAY,mBACrB5D,KAAKiC,IAAIiC,UAAY,OACrBlE,KAAKiC,IAAIkC,SAASnE,KAAKc,OAAQmD,EAAW,EAAGjE,KAAKqC,QAAU,K,6CAGzC+B,EAAWC,GAC1BA,EAAY,GACZrE,KAAKiC,IAAI2B,UAAY,iBACrB5D,KAAKiC,IAAI4B,SAAS,EAAG,EAAG7D,KAAKsE,SAASF,GAAYpE,KAAKqC,UAChDgC,EAAY,IACnBrE,KAAKiC,IAAI2B,UAAY,iBACrB5D,KAAKiC,IAAI4B,SAAS7D,KAAKsE,SAASF,GAAY,EAAGpE,KAAKmC,OAAQnC,KAAKqC,Y,gCAI/DlB,EAAgBC,GACtBpB,KAAKiC,IAAIsC,KAAO,aAChBvE,KAAKiC,IAAI2B,UAAY,qBAIrB,IAFA,IAAIY,EAAkBC,KAAKC,MAAM1E,KAAKgB,QAAUG,GAAkBA,EAC9DwD,EAAkBF,KAAKG,KAAK5E,KAAKiB,QAAUE,GAAkBA,EACxD0D,EAAIL,EAAgBK,GAAKF,EAAgBE,GAAK1D,EACnDnB,KAAK8E,SAASD,GAAG,GAKrB,IAFA,IAAIE,EAAkBN,KAAKC,MAAM1E,KAAKgB,QAAUI,GAAkBA,EAC9D4D,EAAkBP,KAAKG,KAAK5E,KAAKiB,QAAUG,GAAkBA,EACxDyD,EAAIE,EAAgBF,GAAKG,EAAgBH,GAAKzD,EACnDpB,KAAK8E,SAASD,GAAG,K,+BAMhBI,EAASC,GACdlF,KAAKiC,IAAIiC,UAAY,SACrB,IAmFOiB,EAAKC,EAAKC,EAnFbpB,EAAWjE,KAAKsE,SAASW,GACzBC,GACAlF,KAAKiC,IAAI2B,UAAY5D,KAAK0B,iBAC1B1B,KAAKiC,IAAI4B,SAASI,EAAWjE,KAAKsB,iBAAmB,EAAG,EAAGtB,KAAKsB,iBAAkBtB,KAAKuB,mBACvFvB,KAAKiC,IAAIkC,SAASc,EAAQK,SA+EvBH,GA/EsCnF,KAAKqB,cA+EjCgE,EA/EmD,IAgFjEF,IADSC,EA/EqD,GAgFjDA,EAAMD,GAAOE,EAAMA,EAAMF,IAhFkClB,EAAUjE,KAAKuB,kBAAoB,MAE1GvB,KAAKiC,IAAI2B,UAAY5D,KAAK2B,iBAC1B3B,KAAKiC,IAAI4B,SAASI,EAAWjE,KAAKwB,iBAAmB,EAAG,EAAGxB,KAAKwB,iBAAkBxB,KAAKyB,sB,+BAItF8D,GACL,OAAOvF,KAAKwF,IAAID,EAAMvF,KAAKgB,QAAShB,KAAKiB,QAAS,EAAGjB,KAAKmC,U,0BAG1DQ,EAAG8C,EAAQC,EAAQC,EAASC,GAC5B,OAAQjD,EAAI8C,IAAWG,EAAUD,IAAYD,EAASD,GAAUE,I,uCAIhE3F,KAAKgB,QAAUhB,KAAKc,OAASd,KAAKe,OAClCf,KAAKiB,QAAUjB,KAAKc,OAASd,KAAKe,S,6BAG/B8E,GACH7F,KAAKe,OAAS0D,KAAKqB,IAAID,GACvB7F,KAAK+F,kBACL/F,KAAKuD,iBACLvD,KAAK+C,W,wCAIL,IAAIiD,EAASvB,KAAKC,MAAMD,KAAKwB,MAAMjG,KAAKe,SACpCK,EAAiBqD,KAAKyB,IAAI,GAAIF,GAC9B7E,EAAiBsD,KAAKyB,IAAI,GAAIF,EAAS,GAG3ChG,KAAKqB,cAAgB2E,EACrBhG,KAAKoB,eAAiBA,EACtBpB,KAAKmB,eAAiBA,I,mCAGb6B,GAAQ,IAAD,OACa,IAAzBA,EAAMmD,QAAQC,SACdpG,KAAKuC,IAAI8D,QACTrG,KAAKsG,WAAa,SAACtD,GAAD,OAAW,EAAKuD,UAAUvD,IAC5ChD,KAAK8B,OAAOgB,iBAAiB,YAAa9C,KAAKsG,YAC/CtG,KAAKwG,YAAcxG,KAAKe,OACxBf,KAAKyG,WAAazD,EAAMmD,QAAQ,GAAGO,MAAQ1D,EAAMmD,QAAQ,GAAGO,S,iCAIzD1D,GACsB,IAAzBA,EAAMmD,QAAQC,SACdpG,KAAKuC,IAAIoE,SACT3G,KAAK8B,OAAO8E,oBAAoB,YAAa5G,KAAKsG,e,gCAIhDtD,GACN,GAAGA,EAAMmD,QAAQ,IAAMnD,EAAMmD,QAAQ,GAAG,CACpC,IAAIU,EAAQ7D,EAAMmD,QAAQ,GAAGO,MAAQ1D,EAAMmD,QAAQ,GAAGO,MAClDI,EAAS9G,KAAKwG,aAAexG,KAAKyG,WAAaI,GAAS7G,KAAK4B,qBACjE5B,KAAKoD,OAAO0D,GACZ9D,EAAM+D,sBAEN/G,KAAKkD,WAAWF,K,oCAKVA,GACVhD,KAAKoD,OAAOpD,KAAKe,OAAUiC,EAAMgE,OAAShH,KAAK6B,oBAAsB7B,KAAKe,U,+BAI1E,OACI,0BAAQkG,MAAOjH,KAAKJ,MAAMqH,Y,GA1NAC,aCKtC,I,sBC8EeC,E,YA7EX,WAAYvH,GAAQ,IAAD,8BACf,4CAAMA,KAEDwH,aAAevG,oBAAS,SAACwG,GAC1B,EAAKC,SAAS,CACVC,QAAS,CACLC,MAAO,CACHpC,IAAKiC,EAAS,GACdhC,IAAKgC,EAAS,SAI3B,EAAE,IAGL,EAAKxH,MAAQ,CACT0H,QAAS,CACLE,MAAO,CACHC,WAAY,CACRC,SAAS,EACTC,OAAQ,WAEZlE,OAAQ,QACRmE,KAAM,CACFF,SAAS,GAEbG,MAAO,EAAKlI,MAAMmI,YAEtBC,WAAY,CACRL,SAAS,GAEbM,OAAQ,CACJC,MAAO,YAEXJ,MAAO,CACHK,KAAM,EAAKvI,MAAMwI,WACjBC,MAAO,QAEXC,KAAM,CACFC,IAAK,CACDC,OAAQ,CAAC,UAAW,eACpBC,QAAS,KAGjBjB,MAAO,CACHkB,KAAM,UACNtD,IAAK,EAAKxF,MAAM+I,UAAU,GAC1BtD,IAAK,EAAKzF,MAAM+I,UAAU,KAIlCC,OAAQ,CAAC,CACLxI,KAAM,EAAKR,MAAMwI,WACjBS,KAAM,EAAKjJ,MAAMkJ,cArDV,E,gFA2DAC,EAAWC,EAAWC,GACjCF,EAAUJ,YAAc3I,KAAKJ,MAAM+I,WACnC3I,KAAKoH,aAAapH,KAAKJ,MAAM+I,a,+BAKjC,OACI,yBAAK1B,MAAOjH,KAAKJ,MAAMqH,OACnB,kBAAC,IAAD,CAAOvD,OAAO,OAAO6D,QAASvH,KAAKH,MAAM0H,QAASqB,OAAQ5I,KAAKH,MAAM+I,c,GArE7D1B,IAAMzG,W,SCLTyI,E,iLAEjB,OACE,kBAACC,EAAA,EAAD,CAAUC,YAAY,aACpBC,OAAK,EAACC,QAAM,EAACC,WAAS,EAAChC,QAASvH,KAAKJ,MAAM4J,iBAC3CC,SAAUzJ,KAAKJ,MAAM8J,eACrBC,MAAO3J,KAAKJ,MAAMgK,qB,GANkB1C,IAAMzG,W,uCCDXyG,IAAMzG,U,0BHKzCoI,EAAO,GACFhE,EAAI,EAAGA,EAAI,EAAGA,IACnBgE,EAAKgB,KAAK,CAAClH,EAAGkC,EAAI,EAAGiF,EAAmB,GAAhBrF,KAAKsF,WAMN7C,IAAMzG,UIbjC,I,aADIoI,EAAO,GACFhE,EAAI,EAAGA,EAAI,IAAKA,IACrBgE,EAAKgB,KAAK,CAAChF,EAAI,IAAqB,GAAhBJ,KAAKsF,WAML7C,IAAMzG,UCc9B,I,ICjBMuJ,EAAa,CACfrG,MAAO,OACPD,OAAQ,QACRuG,gBAAiB,SAGfC,EAAgB,CAClBC,SAAU,QACVC,KAAM,EACNC,OAAQ,EACR1G,MAAO,OACPD,OAAQ,SAkCG4G,E,YA7BX,WAAY1K,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAQ,CACT8I,UAAW,CAAC,EAAE,IAHJ,E,sEAQE3I,KAAKJ,MAAM+I,UAG7B,IAHA,IACI4B,EAAS,GAEJ1F,EAAI,EAAGA,EAAI7E,KAAKJ,MAAMkJ,WAAW1C,OAAQvB,IAChD0F,EAAOV,KAAK,kBAAC,EAAD,CAAWW,IAAK3F,EAAG8D,UAAa3I,KAAKJ,MAAM+I,UACrD1B,MAAS+C,EAAYjC,WAAY,OACjCe,WAAY9I,KAAKJ,MAAMkJ,WAAWjE,GAAtB,KACZuD,WAAYpI,KAAKJ,MAAMkJ,WAAWjE,GAAtB,QAGd,OACI,yBAAK4F,MAAM,WACP,kBAAC,EAAD,CAAgBjB,iBAAkBxJ,KAAKJ,MAAM4J,iBAAkBE,eAAgB1J,KAAKJ,MAAM8J,eAAgBgB,cAAe1K,KAAKJ,MAAM8K,gBACpI,yBAAKD,MAAM,UACRF,GAEH,kBAAC,EAAD,CAAUtD,MAAOiD,EAAetJ,kBAAmBZ,KAAKJ,MAAMgB,kBAAmB+J,QAAS3K,KAAKJ,MAAM+K,QAASC,SAAU5K,KAAKJ,MAAMgL,gB,GAzB/H1D,IAAMzG,W,kBCpBLoK,E,iLAMjB,IAAIC,EAAY,GACZhC,EAAa9I,KAAKJ,MAAM4J,iBAC5BhG,QAAQC,IAAIqF,EAAW1C,QACvB,IAAK,IAAIvB,EAAI,EAAGA,EAAIiE,EAAW1C,OAAQvB,IAAK,CAE1C,IAAIkG,EADJvH,QAAQC,IAAI,OAGVsH,EAD6B,GAA3BjC,EAAWjE,GAAGmG,UACA,kBAACC,EAAA,EAAMC,KAAP,KAAY,kBAACC,EAAA,EAAD,CAAM/K,KAAK,eAEvB,kBAAC6K,EAAA,EAAMC,KAAP,KAAY,kBAACC,EAAA,EAAD,CAAM/K,KAAK,WAEzC0K,EAAUjB,KACR,kBAACoB,EAAA,EAAMG,IAAP,CAAWZ,IAAI,sBACb,kBAACS,EAAA,EAAMC,KAAP,KAAapC,EAAWjE,GAAGsD,MAC3B,kBAAC8C,EAAA,EAAMC,KAAP,KAAapC,EAAWjE,GAAGwG,QAE1BN,IAMP,OADAvH,QAAQC,IAAIqH,GAEV,yBAAKL,MAAM,gBACT,uDACA,kBAACQ,EAAA,EAAD,KACE,kBAACA,EAAA,EAAMK,OAAP,KACE,kBAACL,EAAA,EAAMG,IAAP,KACE,kBAACH,EAAA,EAAMM,WAAP,oBACA,kBAACN,EAAA,EAAMM,WAAP,cACA,kBAACN,EAAA,EAAMM,WAAP,iBAGJ,kBAACN,EAAA,EAAMO,KAAP,KACGV,EACD,kBAACG,EAAA,EAAMG,IAAP,a,GAzC6BlE,IAAMzG,WFoB3CoI,EAAO,GACP4C,EAAQ,GACJ5G,EAAI,EAAGA,EAAI,IAAMA,IACrBgE,EAAKgB,KAAK,CAAChF,EAAE,IAAqB,GAAhBJ,KAAKsF,WACvB0B,EAAM5B,KAAK,CAAChF,EAAE,IAAqB,GAAhBJ,KAAKsF,W,IAGP2B,E,YAEnB,WAAY9L,GAAQ,IAAD,8BACjB,4CAAMA,KA6BRW,QAAU,SAACoL,EAAD,GAAgB,IAAXvL,EAAU,EAAVA,KACb,EAAKkH,SAAS,CAACrH,YAAaG,IAC5BoD,QAAQC,IAAIrD,IAhCK,EAmCnBwL,qBAAuB,WACrB,IAAIC,EAAc,EAAKhM,MAAMC,gBAC7B0D,QAAQC,KAAKoI,GACb,EAAKvE,SAAS,CAACxH,iBAAmB+L,KAtCjB,EAyCnBjL,kBAAoB,SAACkL,GAGnB,EAAKxE,SAAS,CAACqB,UAAWmD,KA5CT,EAgDnBpC,eAAiB,SAACiC,EAAD,GAAiB,IAAZhC,EAAW,EAAXA,MACpB,EAAK9J,MAAMkM,eAAelC,KAAKF,GAC/B,EAAKrC,SAAS,CAACoD,cAAgB,KAGlB,iBAATf,EACF,EAAK9J,MAAMiJ,WAAWe,KAAK,CAAC,KAAQF,EAAO,KAAQd,IAEnD,EAAKhJ,MAAMiJ,WAAWe,KAAK,CAAC,KAAQF,EAAO,KAAQ8B,KAtDrD,EAAK5L,MAAQ,CACXI,YAAY,OACZ+L,gBAAe,EACflM,iBAAiB,EACjBmM,eAAgB,UAEhBzC,iBAAkB,CAAC,CAACgB,IAAK,QAASrC,KAAM,QAAS6C,WAAW,EAAMK,OAAQ,gCAAiC,CAACb,IAAK,gBAAiBrC,KAAM,oBAAqBkD,OAAQ,mCAAoCL,WAAU,IAEnNrC,UAAW,CAAC,EAAG,GAEf+B,cAAe,GAEfE,UAAU,EACVD,QAAS,GAETuB,QAAS,IACTH,eAAgB,GAChBjD,WAAY,IAnBG,E,sEAkEjB,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAQvI,QAASP,KAAKO,QAASN,YAAaD,KAAKH,MAAMI,YACrD2L,qBAAsB5L,KAAK4L,uBAE7B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOO,KAAK,YACV,kBAAC,EAAD,CAASxD,UAAW3I,KAAKH,MAAM8I,UAAW/H,kBAAmBZ,KAAKY,kBAAmBgK,SAAU5K,KAAKH,MAAM+K,SAAUD,QAAS3K,KAAKH,MAAM8K,QAASnB,iBAAkBxJ,KAAKH,MAAM2J,iBAAkBE,eAAgB1J,KAAK0J,eAAgBgB,cAAe1K,KAAKH,MAAM6K,cAAe5B,WAAY9I,KAAKH,MAAMiJ,cAEvS,kBAAC,IAAD,CAAOqD,KAAK,WACV,kBAAC,EAAD,CAAa3C,iBAAkBxJ,KAAKH,MAAM2J,0B,GA9ErBtC,IAAMzG,WGlBnB2L,QACW,cAA7BvJ,OAAOwJ,SAASC,UAEe,UAA7BzJ,OAAOwJ,SAASC,UAEhBzJ,OAAOwJ,SAASC,SAASC,MACvB,2DCZNxK,IAASyK,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5df64377.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Menu, Icon } from 'semantic-ui-react'\n\nexport default class MenuExampleSecondary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { sideMenuVisible: 'true' }\n  }\n\n  render() {\n    const activeItem = this.props.currentPage\n    return (\n      <Menu>\n\n        <Menu.Item\n          name='home'\n          active={activeItem === 'home'}\n          onClick={this.props.setPage}\n          href=\"/sensors\"\n        />\n\n        <Menu.Item\n          name='sensorPage'\n          active={activeItem === 'sensorPage'}\n          onClick={this.props.setPage}\n          href=\"/status\"\n        />\n      </Menu>\n    )\n  }\n}\n","function DataWebSocketRequest(timeRange, density, sensors, ws) {\n\n  ws.onopen = function() {\n    ws.send([timeRange, density, sensors])\n  }\n\n  var dataObj;\n  ws.onmessage = function(msg) {\n    dataObj = msg.data\n  }\n\n  return dataObj\n}\n\nexport default DataWebSocketRequest\n","import * as React from \"react\"\nimport * as Impetus from \"impetus\"\nimport ReactDOM from \"react-dom\"\nimport {throttle} from \"lodash\"\n\nexport default class Timeline extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.onTimeframeUpdate = throttle(props.onTimeframeUpdate, 1000/60);\n\n        this.center = 0;\n        this.radius = 0; //How far to left and right of center we can see.\n\n        this.timeMin = 0;\n        this.timeMax = 0;\n\n        this.lastX = 0;\n\n        this.minorDivisions = .1;\n        this.majorDivisions = .21;\n        this.divisionPlace = 0;\n\n        /*Styling Consts*/\n        //TICKS\n        this.MAJOR_TICK_WIDTH = 3;\n        this.MAJOR_TICK_HEIGHT = 40;\n\n        this.MINOR_TICK_WIDTH = 1;\n        this.MINOR_TICK_HEIGHT = 30;\n\n        //COLORS\n        this.MAJOR_TICK_COLOR = 'rgb(250, 250, 250)';\n        this.MINOR_TICK_COLOR = 'rgb(210, 210, 210)';\n\n        this.zoomMotionMultiplier = 1;\n\n        this.zoomWheelMultiplier = .001;\n\n\n    }\n\n    componentDidMount() {\n        this.canvas = ReactDOM.findDOMNode(this);\n        this.ctx = this.canvas.getContext(\"2d\");\n\n        this.cwidth = this.canvas.scrollWidth;\n        this.cheight = this.canvas.scrollHeight;\n\n        this.imp = new Impetus({\n            source: this.canvas,\n            update: (x) => this.update(x),\n            friction: .75\n            //boundX: [-1000, 0]\n        });\n\n        window.addEventListener(\"resize\", () => {\n            //this.canvas = this.\n            this.redraw();\n        });\n\n        /* Touch Shit */\n        this.canvas.addEventListener(\"touchstart\", (event) => this.touchStarted(event));\n        this.canvas.addEventListener(\"touchend\", (event) => this.touchEnded(event));\n        this.canvas.addEventListener(\"touchcancel\", (event) => this.touchEnded(event));\n        this.canvas.addEventListener(\"wheel\", (event) => this.wheelScrolled(event));\n\n        this.setRad(1);\n        this.update(0);\n    }\n\n    update(newX) {\n\n        let dx = newX - this.lastX;\n\n        this.center += -dx * this.radius * 2 / (this.cwidth);\n        this.lastX = newX;\n        this.calcTimeBounds();\n        this.redraw();\n    }\n\n    redraw() {\n        if(this.onTimeframeUpdate){\n            this.onTimeframeUpdate([this.timeMin, this.timeMax]);\n        } else {\n            console.log(\"Timeframe updated, but no listener!\")\n        }\n\n        /* Update vars needed to draw new canvas*/\n        this.cwidth = this.canvas.scrollWidth;\n        this.cheight = this.canvas.scrollHeight;\n        this.canvas.height = this.cheight;\n        this.canvas.width = this.cwidth;\n\n        //this.ctx.clearRect(0, 0, this.cwidth, this.cheight);\n\n        this.ctx.fillStyle = 'rgb(120,120,120)';\n        this.ctx.fillRect(0, 0, this.cwidth, this.cheight);\n\n        this.drawTicks(this.minorDivisions, this.majorDivisions);\n\n        this.drawDisabledBackground(0, -1);\n\n        this.drawPositionLine();\n    }\n\n    drawPositionLine() {\n        let centerPx = this.cwidth / 2;\n        this.ctx.fillStyle = 'rgba(255,0,0,.6)';\n        this.ctx.fillRect(centerPx - this.MAJOR_TICK_WIDTH / 2, 0, this.MAJOR_TICK_WIDTH, this.cheight);\n        this.ctx.fillStyle = 'rgb(240,240,240)';\n        this.ctx.textAlign = \"left\";\n        this.ctx.fillText(this.center, centerPx + 2, this.cheight - 2);\n    }\n\n    drawDisabledBackground(timeStart, direction) {\n        if (direction < 0) {\n            this.ctx.fillStyle = 'rgba(0,0,0,.3)';\n            this.ctx.fillRect(0, 0, this.timeToPx(timeStart), this.cheight);\n        } else if (direction > 0) {\n            this.ctx.fillStyle = 'rgba(0,0,0,.3)';\n            this.ctx.fillRect(this.timeToPx(timeStart), 0, this.cwidth, this.cheight);\n        }\n    }\n\n    drawTicks(minorDivisions, majorDivisions) {\n        this.ctx.font = '12px Arial';\n        this.ctx.fillStyle = 'rgb(230, 230, 230)';\n\n        let minorLowerMark = (Math.floor(this.timeMin / minorDivisions) * minorDivisions);\n        let minorUpperMark = (Math.ceil(this.timeMax / minorDivisions) * minorDivisions);\n        for (let i = minorLowerMark; i <= minorUpperMark; i += minorDivisions) {\n            this.drawTick(i, false);\n        }\n\n        let majorLowerMark = (Math.floor(this.timeMin / majorDivisions) * majorDivisions);\n        let majorUpperMark = (Math.ceil(this.timeMax / majorDivisions) * majorDivisions);\n        for (let i = majorLowerMark; i <= majorUpperMark; i += majorDivisions) {\n            this.drawTick(i, true);\n        }\n\n    }\n\n    /* Draws one tick on the timeline. Takes a val + whether it's a major (labeled) or minor (unlabeled + smaller) tick*/\n    drawTick(timeVal, major) {\n        this.ctx.textAlign = \"center\";\n        let centerPx = this.timeToPx(timeVal);\n        if (major) {\n            this.ctx.fillStyle = this.MAJOR_TICK_COLOR;\n            this.ctx.fillRect(centerPx - this.MAJOR_TICK_WIDTH / 2, 0, this.MAJOR_TICK_WIDTH, this.MAJOR_TICK_HEIGHT);\n            this.ctx.fillText(timeVal.toFixed(clamp(-this.divisionPlace, 0, 100)), centerPx, this.MAJOR_TICK_HEIGHT + 14); //Write the text of it.\n        } else {\n            this.ctx.fillStyle = this.MINOR_TICK_COLOR;\n            this.ctx.fillRect(centerPx - this.MINOR_TICK_WIDTH / 2, 0, this.MINOR_TICK_WIDTH, this.MINOR_TICK_HEIGHT);\n        }\n    }\n\n    timeToPx(time) {\n        return this.map(time, this.timeMin, this.timeMax, 0, this.cwidth);\n    }\n\n    map(x, in_min, in_max, out_min, out_max) {\n        return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\n    }\n\n    calcTimeBounds() {\n        this.timeMin = this.center - this.radius;\n        this.timeMax = this.center + this.radius;\n    }\n\n    setRad(newR) {\n        this.radius = Math.abs(newR);\n        this.updateDivisions();\n        this.calcTimeBounds();\n        this.redraw();\n    }\n\n    updateDivisions() {\n        let places = Math.floor(Math.log10(this.radius));\n        let majorDivisions = Math.pow(10, places);\n        let minorDivisions = Math.pow(10, places - 1);\n        //console.log(places, majorDivisions, minorDivisions);\n\n        this.divisionPlace = places;\n        this.majorDivisions = majorDivisions;\n        this.minorDivisions = minorDivisions;\n    }\n\n    touchStarted(event) {\n        if (event.touches.length === 2) { //2 fingers are on the screen, start zooming.\n            this.imp.pause();\n            this.tmListener = (event) => this.touchMove(event);\n            this.canvas.addEventListener(\"touchmove\", this.tmListener);\n            this.originalRad = this.radius;\n            this.originalDs = event.touches[0].pageX - event.touches[1].pageX;\n        }\n    }\n\n    touchEnded(event) {\n        if (event.touches.length !== 2) { //2 fingers are on the screen, start zooming.\n            this.imp.resume();\n            this.canvas.removeEventListener(\"touchmove\", this.tmListener);\n        }\n    }\n\n    touchMove(event) {\n        if(event.touches[0] && event.touches[1]){\n            let newDs = event.touches[0].pageX - event.touches[1].pageX;\n            let newRad = this.originalRad * (this.originalDs / newDs) * this.zoomMotionMultiplier;\n            this.setRad(newRad);\n            event.preventDefault();\n        } else {\n            this.touchEnded(event);\n        }\n\n    }\n\n    wheelScrolled(event) {\n        this.setRad(this.radius + (event.deltaY * this.zoomWheelMultiplier * this.radius));\n    }\n\n    render() {\n        return (\n            <canvas style={this.props.style}>\n            </canvas>\n        );\n    }\n}\n\nfunction clamp(num, min, max) {\n    return num <= min ? min : num >= max ? max : num;\n}\n","import React from \"react\";\nimport {\n    VictoryChart,\n    VictoryLine,\n    VictoryTheme,\n}\n    from \"victory\";\n//import {throttle} from 'lodash'\n\nlet data = [];\nfor (let i = 0; i < 1; i++) {\n    data.push({x: i / 1, y: Math.random() * 10})\n}\n\nconst GraphStyle = {};\n\n\nclass VictoryGraph extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            chartWidth: 0,\n            chartHeight: this.props.style.height,\n            data: data\n        }\n\n    }\n\n    componentDidMount() {\n        this.setState({\n            chartWidth: window.innerWidth\n\n        });\n        window.addEventListener('resize', this.updateDimensions.bind(this));\n        // remove this on unmount\n    }\n\n    updateDimensions(event) {\n        this.setState({\n            chartWidth: event.target.innerWidth\n        })\n    }\n\n    render() {\n        return (\n            <div style={this.props.style}>\n                <svg viewBox={`0 0 ${this.state.chartWidth} ${this.state.chartHeight}`} preserveAspectRatio=\"none\" width=\"100%\">\n                    <VictoryChart\n                        standalone={false}\n                        width={this.state.chartWidth}\n                        height={this.props.style.height || '200px'}\n                        theme={VictoryTheme.material}\n                        domain={{x: this.props.timeRange}}\n                    >\n                        <VictoryLine\n                            style={{\n                                data: {stroke: \"#c43a31\"},\n                                parent: {border: \"1px solid #ccc\"}\n                            }}\n                            data={this.state.data}\n                        />\n                    </VictoryChart>\n\n                </svg>\n\n            </div>\n\n        )\n    }\n\n\n}\n\nexport default VictoryGraph;\n","import React from \"react\";\nimport Chart from 'react-apexcharts'\nimport {throttle} from 'lodash'\n\n\n\nconst GraphStyle = {};\n\n\n\nclass ApexGraph extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.updateDomain = throttle((newRange) => {\n            this.setState({\n                options: {\n                    xaxis: {\n                        min: newRange[0],\n                        max: newRange[1]\n                    }\n                }\n            });\n        }, 1/30);\n\n\n        this.state = {\n            options: {\n                chart: {\n                    animations: {\n                        enabled: false,\n                        easing: 'easeout',\n                    },\n                    height: '100px',\n                    zoom: {\n                        enabled: false\n                    },\n                    title: this.props.graphTitle\n                },\n                dataLabels: {\n                    enabled: false\n                },\n                stroke: {\n                    curve: 'straight'\n                },\n                title: {\n                    text: this.props.sensorName,\n                    align: 'left'\n                },\n                grid: {\n                    row: {\n                        colors: ['#f3f3f3', 'transparent'], // takes an array which will be repeated on columns\n                        opacity: 0.5\n                    },\n                },\n                xaxis: {\n                    type: \"numeric\",\n                    min: this.props.timeRange[0],\n                    max: this.props.timeRange[1],\n                }\n            },\n\n            series: [{\n                name: this.props.sensorName,\n                data: this.props.sensorData\n            }]\n        };\n\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevProps.timeRange !== this.props.timeRange) {\n            this.updateDomain(this.props.timeRange)\n        }\n    }\n\n    render() {\n        return (\n            <div style={this.props.style}>\n                <Chart height='100%' options={this.state.options} series={this.state.series}/>\n            </div>\n\n        )\n    }\n\n\n}\n\nexport default ApexGraph;\n","import React from 'react'\n\nimport { Dropdown } from 'semantic-ui-react'\n\n\nexport default class SensorDropdown extends React.Component {\n  render() {\n    return(\n      <Dropdown placeholder='Add sensor'\n        fluid search selection options={this.props.avaliableSensors}\n        onChange={this.props.dropdownChange}\n        value={this.props.selectionValue}/>\n    )\n  }\n}\n","import React from 'react'\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\n\nexport default class HighChart extends React.Component {\n  render() {\n    const options = {\n      title: {\n        text: 'My chart'\n      },\n      series: [{\n        data: [1, 2, 3]\n      }]\n    }\n\n    return (\n      <HighchartsReact\n        highcharts={Highcharts}\n        options={options}\n      />\n    )\n  }\n\n}\n","import React from \"react\";\nimport {ResponsiveLine} from \"nivo\";\n\nlet data = [];\nfor (let i = 0; i < 100; i++) {\n    data.push([i / 100, Math.random() * 10])\n}\n\nconst GraphStyle = {};\n\n\nclass NivoGraph extends React.Component {\n    constructor(props) {\n        super(props);\n    };\n\n    render() {\n        return (\n            <div style={this.props.style}>\n                <ResponsiveLine\n                    data={this.props.sensorData}\n                    margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\n                    xScale={{ type: 'point' }}\n                    yScale={{ type: 'linear', stacked: true, min: 'auto', max: 'auto' }}\n                    axisTop={null}\n                    axisRight={null}\n                    axisBottom={{\n                        orient: 'bottom',\n                        tickSize: 5,\n                        tickPadding: 5,\n                        tickRotation: 0,\n                        legend: 'transportation',\n                        legendOffset: 36,\n                        legendPosition: 'middle'\n                    }}\n                    axisLeft={{\n                        orient: 'left',\n                        tickSize: 5,\n                        tickPadding: 5,\n                        tickRotation: 0,\n                        legend: 'count',\n                        legendOffset: -40,\n                        legendPosition: 'middle'\n                    }}\n                    colors={{ scheme: 'nivo' }}\n                    pointSize={10}\n                    pointColor={{ theme: 'background' }}\n                    pointBorderWidth={2}\n                    pointBorderColor={{ from: 'serieColor' }}\n                    pointLabel=\"y\"\n                    pointLabelYOffset={-12}\n                    useMesh={true}\n                    legends={[\n                        {\n                            anchor: 'bottom-right',\n                            direction: 'column',\n                            justify: false,\n                            translateX: 100,\n                            translateY: 0,\n                            itemsSpacing: 0,\n                            itemDirection: 'left-to-right',\n                            itemWidth: 80,\n                            itemHeight: 20,\n                            itemOpacity: 0.75,\n                            symbolSize: 12,\n                            symbolShape: 'circle',\n                            symbolBorderColor: 'rgba(0, 0, 0, .5)',\n                            effects: [\n                                {\n                                    on: 'hover',\n                                    style: {\n                                        itemBackground: 'rgba(0, 0, 0, .03)',\n                                        itemOpacity: 1\n                                    }\n                                }\n                            ]\n                        }\n                    ]}\n                />\n            </div>\n\n        )\n    }\n\n\n}\n\nexport default NivoGraph;\n","import React from 'react';\nimport './App.css';\n\n//router\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n//components\nimport TopBar from './mainPage/topBar'\n\n//functions\nimport DataWebSocketRequest from './websockets';\n\nimport Content from './mainPage/content'\n\n\nimport StatusTable from './vehicleStatus/statusTable'\nvar ws;\n\nvar data = [];\nvar data2 = []\nfor(let i = 0; i < 2000; i++){\n    data.push([i/100, Math.random() * 10])\n    data2.push([i/100, Math.random() * 10])\n}\n\nexport default class App extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      currentPage:'home',\n      sidebarEnabled:false,\n      sideMenuVisible: true,\n      currentProfile: 'General',\n\n      avaliableSensors: [{key: 'Speed', text: 'Speed', connected: true, detail: 'Measures Current Speed (GPS)'}, {key: 'Accelerometer', text: 'Accelerometer (Y)', detail: \"Acclerometer Data in Y direction\", connected:false}],\n\n      timeRange: [0, 1],\n\n      dropdownValue: '',\n\n      realtime: false,\n      lastime: 20,\n\n      density: 1000,\n      currentSensors: [],\n      sensorData: [\n\n      ],\n    }\n  }\n\n  /*\n  componentDidMount() {\n    ws = new WebSocket('/api');\n  }\n  */\n  setPage = (e, {name}) => {\n    this.setState({currentPage: name})\n    console.log(name)\n  }\n\n  handleHamburgerClick = () => {\n    var currentMenu = this.state.sideMenuVisible\n    console.log(!currentMenu)\n    this.setState({sideMenuVisible : !currentMenu})\n  }\n\n  onTimeframeUpdate = (newFrame) => {\n    //TODO write websocket request\n    //DataWebSocketRequest(newFrame, this.state.density, this.state.sensors, ws)\n    this.setState({timeRange: newFrame})\n    //console.log(newFrame)\n  }\n\n  dropdownChange = (e, {value}) => {\n    this.state.currentSensors.push(value)\n    this.setState({dropdownValue : ''})\n\n    //TESTING ONLY!\n    if (value == \"Accelerometer\") {\n      this.state.sensorData.push({'name': value, 'data': data})\n    } else {\n      this.state.sensorData.push({'name': value, 'data': data2})\n    }\n\n  }\n\n\n\n\n  render() {\n\n    return (\n      <Router>\n        <TopBar setPage={this.setPage} currentPage={this.state.currentPage}\n          handleHamburgerClick={this.handleHamburgerClick}/>\n\n        <Switch>\n          <Route path=\"/sensors\">\n            <Content timeRange={this.state.timeRange} onTimeframeUpdate={this.onTimeframeUpdate} realtime={this.state.realtime} lastime={this.state.lastime} avaliableSensors={this.state.avaliableSensors} dropdownChange={this.dropdownChange} dropdownValue={this.state.dropdownValue} sensorData={this.state.sensorData}/>\n          </Route>\n          <Route path=\"/status\">\n            <StatusTable avaliableSensors={this.state.avaliableSensors}/>\n          </Route>\n        </Switch>\n      </Router>\n    )\n  }\n\n}\n","import React from \"react\"\nimport Timeline from \"./modules/Timeline\";\nimport ApexGraph from \"./modules/ApexGraph\"\nimport SensorDropdown from \"./modules/addSensor\"\nimport HighChart from \"./modules/sampleChart\"\nimport VictoryGraph from \"./modules/victory\"\nimport NivoGraph from \"./modules/nivo\"\n\nconst graphStyle = {\n    width: '100%',\n    height: '200px',\n    backgroundColor: \"white\"\n};\n\nconst timelineStyle = {\n    position: 'fixed',\n    left: 0,\n    bottom: 0,\n    width: '100%',\n    height: '100px'\n};\n\n\nclass Graph extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            timeRange: [0,1]\n        };\n    }\n\n    render() {\n      const timeRange = this.props.timeRange;\n      var charts = []\n\n      for (var i = 0; i < this.props.sensorData.length; i++ ) {\n        charts.push(<ApexGraph key={i} timeRange = {this.props.timeRange}\n          style = {graphStyle} graphTitle={'yeee'}\n          sensorData={this.props.sensorData[i]['data']}\n          sensorName={this.props.sensorData[i]['name']}/>)\n\n      }\n        return (\n            <div class=\"content\">\n                <SensorDropdown avaliableSensors={this.props.avaliableSensors} dropdownChange={this.props.dropdownChange} dropdownValue={this.props.dropdownValue}/>\n                <div class=\"charts\">\n                  {charts}\n                </div>\n                <Timeline style={timelineStyle} onTimeframeUpdate={this.props.onTimeframeUpdate} lastime={this.props.lastime} realtime={this.props.realtime}/>\n            </div>\n        );\n    }\n}\nexport default Graph;\n","import React from 'react'\nimport { Table, Icon } from 'semantic-ui-react'\n\nexport default class StatusTable extends React.Component {\n  //var sensorData = this.props.sensorData\n\n\n\n  render() {\n    var tableRows = []\n    var sensorData = this.props.avaliableSensors;\n    console.log(sensorData.length)\n    for (var i = 0; i < sensorData.length; i++) {\n      console.log('yes')\n      var checkmarkBool;\n      if (sensorData[i].connected == true) {\n        checkmarkBool = <Table.Cell><Icon name='checkmark' /></Table.Cell>\n      } else {\n        checkmarkBool = <Table.Cell><Icon name='close' /></Table.Cell>\n      }\n      tableRows.push(\n        <Table.Row key='sensorData[i].name'>\n          <Table.Cell>{sensorData[i].text}</Table.Cell>\n          <Table.Cell>{sensorData[i].detail}</Table.Cell>\n\n          {checkmarkBool}\n\n        </Table.Row>\n      )\n    }\n    console.log(tableRows)\n    return (\n      <div class=\"tableContent\">\n        <h1>Current Sensor Statuses</h1>\n        <Table >\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell>Sensor Name</Table.HeaderCell>\n              <Table.HeaderCell>Notes</Table.HeaderCell>\n              <Table.HeaderCell>Status</Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {tableRows}\n            <Table.Row>\n\n            </Table.Row>\n          </Table.Body>\n\n        </Table>\n\n      </div>\n\n\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}